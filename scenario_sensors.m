function [allData, scenario, sensor] = generateSensorData()
%generateSensorData - Returns sensor detections
%    allData = generateSensorData returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = generateSensorData optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.8 (R2020a) and Automated Driving Toolbox 3.1 (R2020a).
% Generated on: 17-Jul-2020 09:58:00

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {});
% Generate the target poses of all actors relative to the ego vehicle
poses = targetPoses(egoVehicle);
time  = scenario.SimulationTime;

% Generate detections for the sensor
laneDetections = [];
[objectDetections, numObjects, isValidTime] = sensor(poses, time);
objectDetections = objectDetections(1:numObjects);

% Aggregate all detections into a structure for later use
if isValidTime
    allData(end + 1) = struct( ...
        'Time',       scenario.SimulationTime, ...
        'ActorPoses', actorPoses(scenario), ...
        'ObjectDetections', {objectDetections}, ...
        'LaneDetections',   {laneDetections});
end

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = radarDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.9 0], ...
    'MaxRange', 100, ...
    'FieldOfView', [60 5], ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [9.99999999999999 49.9 0;
    17 30 0;
    30.2 27.8 0;
    48.2 28.6 0;
    57.3 37.5 0;
    34.9 50.8 0;
    33.4 73.7 0;
    9.99999999999999 49.9 0];
laneSpecification = lanespec(2, 'Width', 3.925);
road(scenario, roadCenters, 'Lanes', laneSpecification);

% Add the actors
actor(scenario, ...
    'ClassID', 5, ...
    'Length', 2.4, ...
    'Width', 0.76, ...
    'Height', 0.8, ...
    'Position', [39.7 25.9 0], ...
    'PlotColor', [166 166 166] / 255);

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 2.4, ...
    'Width', 0.76, ...
    'Height', 0.8, ...
    'Position', [47.4 47.7 0], ...
    'PlotColor', [166 166 166] / 255);

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 2.4, ...
    'Width', 0.76, ...
    'Height', 0.8, ...
    'Position', [36.9 67.4 0], ...
    'PlotColor', [166 166 166] / 255);

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 2.4, ...
    'Width', 0.76, ...
    'Height', 0.8, ...
    'Position', [11.9 72.7 0], ...
    'PlotColor', [166 166 166] / 255);

actor(scenario, ...
    'ClassID', 5, ...
    'Length', 2.4, ...
    'Width', 0.76, ...
    'Height', 0.8, ...
    'Position', [8.7 40.7 0], ...
    'PlotColor', [166 166 166] / 255);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [26.6 25.9 0], ...
    'FrontOverhang', 0.9, ...
    'PlotColor', [0 0.447 0.741]);

